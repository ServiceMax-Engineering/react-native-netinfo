{"version":3,"sources":["nativeModule.web.ts"],"names":["DEVICE_CONNECTIVITY_EVENT","NetInfoStateType","NetInfoCellularGeneration","connection","window","navigator","mozConnection","webkitConnection","typeMapping","bluetooth","cellular","ethernet","none","other","unknown","wifi","wimax","mixed","effectiveTypeMapping","getCurrentState","_requestedInterface","isConnected","onLine","baseState","isInternetReachable","state","type","details","isConnectionExpensive","saveData","cellularGeneration","effectiveType","carrier","ipAddress","subnet","handlers","nativeHandlers","RNCNetInfo","addListener","handler","nativeHandler","addEventListener","push","removeListeners","index","indexOf","removeEventListener","splice","requestedInterface"],"mappings":"25BASA,OAEEA,yBAFF,KAIO,gBAJP,CAKA,OAEEC,gBAFF,CAWEC,yBAXF,KAYO,SAZP,CA4DA,GAAMC,CAAAA,UAAU,CACdC,MAAM,CAACC,SAAP,CAAiBF,UAAjB,EACAC,MAAM,CAACC,SAAP,CAAiBC,aADjB,EAEAF,MAAM,CAACC,SAAP,CAAiBE,gBAHnB,CAMA,GAAMC,CAAAA,WAAqD,CAAG,CAC5DC,SAAS,CAAER,gBAAgB,CAACQ,SADgC,CAE5DC,QAAQ,CAAET,gBAAgB,CAACS,QAFiC,CAG5DC,QAAQ,CAAEV,gBAAgB,CAACU,QAHiC,CAI5DC,IAAI,CAAEX,gBAAgB,CAACW,IAJqC,CAK5DC,KAAK,CAAEZ,gBAAgB,CAACY,KALoC,CAM5DC,OAAO,CAAEb,gBAAgB,CAACa,OANkC,CAO5DC,IAAI,CAAEd,gBAAgB,CAACc,IAPqC,CAQ5DC,KAAK,CAAEf,gBAAgB,CAACe,KARoC,CAS5DC,KAAK,CAAEhB,gBAAgB,CAACY,KAToC,CAA9D,CAWA,GAAMK,CAAAA,oBAGL,CAAG,CACF,KAAMhB,yBAAyB,CAAC,IAAD,CAD7B,CAEF,KAAMA,yBAAyB,CAAC,IAAD,CAF7B,CAGF,KAAMA,yBAAyB,CAAC,IAAD,CAH7B,CAIF,UAAWA,yBAAyB,CAAC,IAAD,CAJlC,CAHJ,CAWA,GAAMiB,CAAAA,gBAAe,CAAG,QAAlBA,CAAAA,eAAkB,CACtBC,mBADsB,CAEqD,CAC3E,GAAMC,CAAAA,WAAW,CAAGhB,SAAS,CAACiB,MAA9B,CACA,GAAMC,CAAAA,SAAS,CAAG,CAChBC,mBAAmB,CAAE,IADL,CAAlB,CAKA,GAAI,CAACrB,UAAL,CAAiB,CACf,GAAIkB,WAAJ,CAAiB,CACf,GAAMI,CAAAA,OAAwB,kBACzBF,SADyB,EAE5BF,WAAW,CAAE,IAFe,CAG5BK,IAAI,CAAEzB,gBAAgB,CAACY,KAHK,CAI5Bc,OAAO,CAAE,CACPC,qBAAqB,CAAE,KADhB,CAJmB,EAA9B,CAQA,MAAOH,CAAAA,OAAP,CACD,CAED,GAAMA,CAAAA,MAA+B,kBAChCF,SADgC,EAEnCF,WAAW,CAAE,KAFsB,CAGnCG,mBAAmB,CAAE,KAHc,CAInCE,IAAI,CAAEzB,gBAAgB,CAACW,IAJY,CAKnCe,OAAO,CAAE,IAL0B,EAArC,CAOA,MAAOF,CAAAA,MAAP,CACD,CAGD,GAAMG,CAAAA,qBAAqB,CAAGzB,UAAU,CAAC0B,QAAzC,CACA,GAAMH,CAAAA,IAAsB,CAAGvB,UAAU,CAACuB,IAAX,CAC3BlB,WAAW,CAACL,UAAU,CAACuB,IAAZ,CADgB,CAE3BL,WAAW,CACXpB,gBAAgB,CAACY,KADN,CAEXZ,gBAAgB,CAACa,OAJrB,CAMA,GAAIY,IAAI,GAAKzB,gBAAgB,CAACQ,SAA9B,CAAyC,CACvC,GAAMgB,CAAAA,OAA4B,kBAC7BF,SAD6B,EAEhCF,WAAW,CAAE,IAFmB,CAGhCK,IAAI,CAAJA,IAHgC,CAIhCC,OAAO,CAAE,CACPC,qBAAqB,CAArBA,qBADO,CAJuB,EAAlC,CAQA,MAAOH,CAAAA,OAAP,CACD,CAVD,IAUO,IAAIC,IAAI,GAAKzB,gBAAgB,CAACS,QAA9B,CAAwC,CAC7C,GAAMe,CAAAA,OAA2B,kBAC5BF,SAD4B,EAE/BF,WAAW,CAAE,IAFkB,CAG/BK,IAAI,CAAJA,IAH+B,CAI/BC,OAAO,CAAE,CACPC,qBAAqB,CAArBA,qBADO,CAEPE,kBAAkB,CAChBZ,oBAAoB,CAACf,UAAU,CAAC4B,aAAZ,CAApB,EAAkD,IAH7C,CAIPC,OAAO,CAAE,IAJF,CAJsB,EAAjC,CAWA,MAAOP,CAAAA,OAAP,CACD,CAbM,IAaA,IAAIC,IAAI,GAAKzB,gBAAgB,CAACU,QAA9B,CAAwC,CAC7C,GAAMc,CAAAA,OAA2B,kBAC5BF,SAD4B,EAE/BF,WAAW,CAAE,IAFkB,CAG/BK,IAAI,CAAJA,IAH+B,CAI/BC,OAAO,CAAE,CACPC,qBAAqB,CAArBA,qBADO,CAEPK,SAAS,CAAE,IAFJ,CAGPC,MAAM,CAAE,IAHD,CAJsB,EAAjC,CAUA,MAAOT,CAAAA,OAAP,CACD,CAZM,IAYA,IAAIC,IAAI,GAAKzB,gBAAgB,CAACc,IAA9B,CAAoC,CACzC,GAAMU,CAAAA,OAAuB,kBACxBF,SADwB,EAE3BF,WAAW,CAAE,IAFc,CAG3BK,IAAI,CAAJA,IAH2B,CAI3BC,OAAO,CAAE,CACPC,qBAAqB,CAArBA,qBADO,CAEPK,SAAS,CAAE,IAFJ,CAGPC,MAAM,CAAE,IAHD,CAJkB,EAA7B,CAUA,MAAOT,CAAAA,OAAP,CACD,CAZM,IAYA,IAAIC,IAAI,GAAKzB,gBAAgB,CAACe,KAA9B,CAAqC,CAC1C,GAAMS,CAAAA,OAAwB,kBACzBF,SADyB,EAE5BF,WAAW,CAAE,IAFe,CAG5BK,IAAI,CAAJA,IAH4B,CAI5BC,OAAO,CAAE,CACPC,qBAAqB,CAArBA,qBADO,CAJmB,EAA9B,CAQA,MAAOH,CAAAA,OAAP,CACD,CAVM,IAUA,IAAIC,IAAI,GAAKzB,gBAAgB,CAACW,IAA9B,CAAoC,CACzC,GAAMa,CAAAA,OAA+B,kBAChCF,SADgC,EAEnCF,WAAW,CAAE,KAFsB,CAGnCG,mBAAmB,CAAE,KAHc,CAInCE,IAAI,CAAJA,IAJmC,CAKnCC,OAAO,CAAE,IAL0B,EAArC,CAOA,MAAOF,CAAAA,OAAP,CACD,CATM,IASA,IAAIC,IAAI,GAAKzB,gBAAgB,CAACa,OAA9B,CAAuC,CAC5C,GAAMW,CAAAA,OAA0B,kBAC3BF,SAD2B,EAE9BF,WAAW,CAAE,KAFiB,CAG9BG,mBAAmB,CAAE,KAHS,CAI9BE,IAAI,CAAJA,IAJ8B,CAK9BC,OAAO,CAAE,IALqB,EAAhC,CAOA,MAAOF,CAAAA,OAAP,CACD,CAED,GAAMA,CAAAA,KAAwB,kBACzBF,SADyB,EAE5BF,WAAW,CAAE,IAFe,CAG5BK,IAAI,CAAEzB,gBAAgB,CAACY,KAHK,CAI5Bc,OAAO,CAAE,CACPC,qBAAqB,CAArBA,qBADO,CAJmB,EAA9B,CAQA,MAAOH,CAAAA,KAAP,CACD,CA9HD,CAgIA,GAAMU,CAAAA,QAAuD,CAAG,EAAhE,CACA,GAAMC,CAAAA,cAA8B,CAAG,EAAvC,CAEA,GAAMC,CAAAA,UAA+B,CAAG,CACtCC,WADsC,sBAC1BZ,IAD0B,CACpBa,OADoB,CACL,CAC/B,OAAQb,IAAR,EACE,IAAK1B,CAAAA,yBAAL,CAAgC,CAC9B,GAAMwC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAY,CAChCD,OAAO,CAACpB,gBAAe,EAAhB,CAAP,CACD,CAFD,CAIA,GAAIhB,UAAJ,CAAgB,CACdA,UAAU,CAACsC,gBAAX,CAA4B,QAA5B,CAAsCD,aAAtC,EACD,CAFD,IAEO,CACLpC,MAAM,CAACqC,gBAAP,CAAwB,QAAxB,CAAkCD,aAAlC,CAAiD,KAAjD,EACApC,MAAM,CAACqC,gBAAP,CAAwB,SAAxB,CAAmCD,aAAnC,CAAkD,KAAlD,EACD,CAGDL,QAAQ,CAACO,IAAT,CAAcH,OAAd,EACAH,cAAc,CAACM,IAAf,CAAoBF,aAApB,EAEA,MACD,CAlBH,CAoBD,CAtBqC,CAwBtCG,eAxBsC,0BAwBtBjB,IAxBsB,CAwBhBa,OAxBgB,CAwBD,CACnC,OAAQb,IAAR,EACE,IAAK1B,CAAAA,yBAAL,CAAgC,CAE9B,GAAM4C,CAAAA,KAAK,CAAGT,QAAQ,CAACU,OAAT,CAAiBN,OAAjB,CAAd,CACA,GAAMC,CAAAA,aAAa,CAAGJ,cAAc,CAACQ,KAAD,CAApC,CAEA,GAAIzC,UAAJ,CAAgB,CACdA,UAAU,CAAC2C,mBAAX,CAA+B,QAA/B,CAAyCN,aAAzC,EACD,CAFD,IAEO,CACLpC,MAAM,CAACqC,gBAAP,CAAwB,QAAxB,CAAkCD,aAAlC,EACApC,MAAM,CAACqC,gBAAP,CAAwB,SAAxB,CAAmCD,aAAnC,EACD,CAGDL,QAAQ,CAACY,MAAT,CAAgBH,KAAhB,CAAuB,CAAvB,EACAR,cAAc,CAACW,MAAf,CAAsBH,KAAtB,CAA6B,CAA7B,EAEA,MACD,CAlBH,CAoBD,CA7CqC,CA+ChCzB,eA/CgC,0BA+ChB6B,kBA/CgB,2JAgD7B7B,gBAAe,CAAC6B,kBAAD,CAhDc,wEAAxC,CAoDA,cAAeX,CAAAA,UAAf","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n */\r\n\r\nimport {\r\n  NetInfoNativeModule,\r\n  DEVICE_CONNECTIVITY_EVENT,\r\n  NetInfoNativeModuleState,\r\n} from './privateTypes';\r\nimport {\r\n  NetInfoState,\r\n  NetInfoStateType,\r\n  NetInfoUnknownState,\r\n  NetInfoNoConnectionState,\r\n  NetInfoCellularState,\r\n  NetInfoBluetoothState,\r\n  NetInfoEthernetState,\r\n  NetInfoWifiState,\r\n  NetInfoWimaxState,\r\n  NetInfoOtherState,\r\n  NetInfoCellularGeneration,\r\n} from './types';\r\n\r\n// See https://wicg.github.io/netinfo/#dom-connectiontype\r\ntype ConnectionType =\r\n  | 'bluetooth'\r\n  | 'cellular'\r\n  | 'ethernet'\r\n  | 'mixed'\r\n  | 'none'\r\n  | 'other'\r\n  | 'unknown'\r\n  | 'wifi'\r\n  | 'wimax';\r\n\r\n// See https://wicg.github.io/netinfo/#dom-effectiveconnectiontype\r\ntype ConnectionEffectiveType = '2g' | '3g' | '4g' | 'slow-2g';\r\n\r\n// https://wicg.github.io/netinfo/#dom-networkinformation-savedata\r\ntype ConnectionSaveData = boolean;\r\n\r\ninterface Events {\r\n  change: Event;\r\n}\r\n\r\ninterface Connection {\r\n  type: ConnectionType;\r\n  effectiveType: ConnectionEffectiveType;\r\n  saveData: ConnectionSaveData;\r\n  addEventListener<K extends keyof Events>(\r\n    type: K,\r\n    listener: (event: Events[K]) => void,\r\n  ): void;\r\n  removeEventListener<K extends keyof Events>(\r\n    type: K,\r\n    listener: (event: Events[K]) => void,\r\n  ): void;\r\n}\r\n\r\n// Create (optional) connection APIs on navigator\r\ndeclare global {\r\n  interface Navigator {\r\n    connection?: Connection;\r\n    mozConnection?: Connection;\r\n    webkitConnection?: Connection;\r\n  }\r\n}\r\n\r\n// Check if the browser supports the connection API\r\nconst connection =\r\n  window.navigator.connection ||\r\n  window.navigator.mozConnection ||\r\n  window.navigator.webkitConnection;\r\n\r\n// Map browser types to native types\r\nconst typeMapping: Record<ConnectionType, NetInfoStateType> = {\r\n  bluetooth: NetInfoStateType.bluetooth,\r\n  cellular: NetInfoStateType.cellular,\r\n  ethernet: NetInfoStateType.ethernet,\r\n  none: NetInfoStateType.none,\r\n  other: NetInfoStateType.other,\r\n  unknown: NetInfoStateType.unknown,\r\n  wifi: NetInfoStateType.wifi,\r\n  wimax: NetInfoStateType.wimax,\r\n  mixed: NetInfoStateType.other,\r\n};\r\nconst effectiveTypeMapping: Record<\r\n  ConnectionEffectiveType,\r\n  NetInfoCellularGeneration\r\n> = {\r\n  '2g': NetInfoCellularGeneration['2g'],\r\n  '3g': NetInfoCellularGeneration['3g'],\r\n  '4g': NetInfoCellularGeneration['4g'],\r\n  'slow-2g': NetInfoCellularGeneration['2g'],\r\n};\r\n\r\n// Determine current state of connection\r\nconst getCurrentState = (\r\n  _requestedInterface?: string,\r\n): Pick<NetInfoState, Exclude<keyof NetInfoState, 'isInternetReachable'>> => {\r\n  const isConnected = navigator.onLine;\r\n  const baseState = {\r\n    isInternetReachable: null,\r\n  };\r\n\r\n  // If we don't have a connection object, we return minimal information\r\n  if (!connection) {\r\n    if (isConnected) {\r\n      const state: NetInfoOtherState = {\r\n        ...baseState,\r\n        isConnected: true,\r\n        type: NetInfoStateType.other,\r\n        details: {\r\n          isConnectionExpensive: false,\r\n        },\r\n      };\r\n      return state;\r\n    }\r\n\r\n    const state: NetInfoNoConnectionState = {\r\n      ...baseState,\r\n      isConnected: false,\r\n      isInternetReachable: false,\r\n      type: NetInfoStateType.none,\r\n      details: null,\r\n    };\r\n    return state;\r\n  }\r\n\r\n  // Otherwise try to return detailed information\r\n  const isConnectionExpensive = connection.saveData;\r\n  const type: NetInfoStateType = connection.type\r\n    ? typeMapping[connection.type]\r\n    : isConnected\r\n    ? NetInfoStateType.other\r\n    : NetInfoStateType.unknown;\r\n\r\n  if (type === NetInfoStateType.bluetooth) {\r\n    const state: NetInfoBluetoothState = {\r\n      ...baseState,\r\n      isConnected: true,\r\n      type,\r\n      details: {\r\n        isConnectionExpensive,\r\n      },\r\n    };\r\n    return state;\r\n  } else if (type === NetInfoStateType.cellular) {\r\n    const state: NetInfoCellularState = {\r\n      ...baseState,\r\n      isConnected: true,\r\n      type,\r\n      details: {\r\n        isConnectionExpensive,\r\n        cellularGeneration:\r\n          effectiveTypeMapping[connection.effectiveType] || null,\r\n        carrier: null,\r\n      },\r\n    };\r\n    return state;\r\n  } else if (type === NetInfoStateType.ethernet) {\r\n    const state: NetInfoEthernetState = {\r\n      ...baseState,\r\n      isConnected: true,\r\n      type,\r\n      details: {\r\n        isConnectionExpensive,\r\n        ipAddress: null,\r\n        subnet: null,\r\n      },\r\n    };\r\n    return state;\r\n  } else if (type === NetInfoStateType.wifi) {\r\n    const state: NetInfoWifiState = {\r\n      ...baseState,\r\n      isConnected: true,\r\n      type,\r\n      details: {\r\n        isConnectionExpensive,\r\n        ipAddress: null,\r\n        subnet: null,\r\n      },\r\n    };\r\n    return state;\r\n  } else if (type === NetInfoStateType.wimax) {\r\n    const state: NetInfoWimaxState = {\r\n      ...baseState,\r\n      isConnected: true,\r\n      type,\r\n      details: {\r\n        isConnectionExpensive,\r\n      },\r\n    };\r\n    return state;\r\n  } else if (type === NetInfoStateType.none) {\r\n    const state: NetInfoNoConnectionState = {\r\n      ...baseState,\r\n      isConnected: false,\r\n      isInternetReachable: false,\r\n      type,\r\n      details: null,\r\n    };\r\n    return state;\r\n  } else if (type === NetInfoStateType.unknown) {\r\n    const state: NetInfoUnknownState = {\r\n      ...baseState,\r\n      isConnected: false,\r\n      isInternetReachable: false,\r\n      type,\r\n      details: null,\r\n    };\r\n    return state;\r\n  }\r\n\r\n  const state: NetInfoOtherState = {\r\n    ...baseState,\r\n    isConnected: true,\r\n    type: NetInfoStateType.other,\r\n    details: {\r\n      isConnectionExpensive,\r\n    },\r\n  };\r\n  return state;\r\n};\r\n\r\nconst handlers: ((state: NetInfoNativeModuleState) => void)[] = [];\r\nconst nativeHandlers: (() => void)[] = [];\r\n\r\nconst RNCNetInfo: NetInfoNativeModule = {\r\n  addListener(type, handler): void {\r\n    switch (type) {\r\n      case DEVICE_CONNECTIVITY_EVENT: {\r\n        const nativeHandler = (): void => {\r\n          handler(getCurrentState());\r\n        };\r\n\r\n        if (connection) {\r\n          connection.addEventListener('change', nativeHandler);\r\n        } else {\r\n          window.addEventListener('online', nativeHandler, false);\r\n          window.addEventListener('offline', nativeHandler, false);\r\n        }\r\n\r\n        // Remember handlers\r\n        handlers.push(handler);\r\n        nativeHandlers.push(nativeHandler);\r\n\r\n        break;\r\n      }\r\n    }\r\n  },\r\n\r\n  removeListeners(type, handler): void {\r\n    switch (type) {\r\n      case DEVICE_CONNECTIVITY_EVENT: {\r\n        // Get native handler\r\n        const index = handlers.indexOf(handler);\r\n        const nativeHandler = nativeHandlers[index];\r\n\r\n        if (connection) {\r\n          connection.removeEventListener('change', nativeHandler);\r\n        } else {\r\n          window.addEventListener('online', nativeHandler);\r\n          window.addEventListener('offline', nativeHandler);\r\n        }\r\n\r\n        // Remove handlers\r\n        handlers.splice(index, 1);\r\n        nativeHandlers.splice(index, 1);\r\n\r\n        break;\r\n      }\r\n    }\r\n  },\r\n\r\n  async getCurrentState(requestedInterface): Promise<NetInfoNativeModuleState> {\r\n    return getCurrentState(requestedInterface);\r\n  },\r\n};\r\n\r\nexport default RNCNetInfo;\r\n"]}